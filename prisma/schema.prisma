generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model guilds {
  id                    String                  @id @db.VarChar(25)
  lang                  String?                 @default("es-es") @db.VarChar(10)
  TicketChannel         String?                 @db.VarChar(30)
  TicketTranscripts     String?                 @db.VarChar(30)
  TicketMsg             String?                 @db.VarChar(30)
  TicketOpinions        String?                 @db.VarChar(30)
  proxmoxLogs           String?                 @db.VarChar(30)
  image                 String?                 @db.VarChar(250)
  mail                  mail?
  perfils               perfils[]
  virtualization_panels virtualization_panels[]
  virtual_machines      virtual_machines[]
  guilds_commandos      guilds_commandos[]
}

model guilds_commandos {
  guildId String  @db.VarChar(50)
  CommId  String  @db.VarChar(50)
  enabled Boolean @default(false)
  guilds  guilds  @relation(fields: [guildId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_guilds_commandos_guilds")

  @@id([guildId, CommId])
}

model mail {
  guildId   String  @id @db.VarChar(30)
  host      String? @db.VarChar(30)
  port      Int     @default(465)
  secure    Int     @default(1) @db.TinyInt
  loginType String  @db.VarChar(50)
  loginUser String  @default("") @db.VarChar(255)
  loginPass String  @default("") @db.VarChar(255)
  guilds    guilds  @relation(fields: [guildId], references: [id], onUpdate: Restrict, map: "FK1_guild")
}

model perfil_permisos {
  perfilId Int
  permId   Int
  perfils  perfils  @relation(fields: [perfilId], references: [id], onDelete: Cascade, map: "FK1_perfil")
  permisos permisos @relation(fields: [permId], references: [id], onDelete: Cascade, map: "FK2_perms")

  @@id([perfilId, permId])
  @@index([permId], map: "FK2_perm")
}

model perfils {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(30)
  guildId         String            @db.VarChar(30)
  roleId          String            @db.VarChar(30)
  perfil_permisos perfil_permisos[]
  guilds          guilds            @relation(fields: [guildId], references: [id], onDelete: Cascade, map: "FK1_guilds")

  @@index([guildId, name], map: "guildId")
  @@index([guildId, roleId], map: "guildId_roleId")
}

model permisos {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(50)
  Descripcion     String?           @db.VarChar(255)
  perfil_permisos perfil_permisos[]
}

// Panel genérico para soportar diferentes tipos de virtualizadores
model virtualization_panels {
  id          Int      @id @default(autoincrement()) @db.UnsignedInt
  guildId     String   @db.VarChar(30)
  name        String   @db.VarChar(50) // Nombre descriptivo del panel
  type        String   @db.VarChar(20) // 'proxmox', 'vmware', 'hyper-v', etc.
  apiUrl      String   @db.VarChar(255) // URL base de la API
  credentials Json // Credenciales encriptadas (token, user/pass, etc.)
  config      Json? // Configuración específica del tipo
  active      Boolean  @default(true)
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  guilds   guilds             @relation(fields: [guildId], references: [id], onDelete: Cascade)
  machines virtual_machines[]

  @@unique([guildId, name])
  @@index([guildId, type])
  @@index([guildId, isDefault])
}

// Máquinas virtuales genéricas
model virtual_machines {
  id          String    @id @db.VarChar(50) // ID único de la VM
  panelId     Int       @db.UnsignedInt
  guildId     String    @db.VarChar(30)
  userId      String?   @db.VarChar(25) // Owner de la VM (opcional)
  name        String    @db.VarChar(100)
  description String?   @db.VarChar(255)
  status      String    @db.VarChar(20) // running, stopped, paused, etc.
  specs       Json // CPU, RAM, Storage, etc.
  network     Json? // IPs, puertos, etc.
  metadata    Json? // Datos específicos del panel
  tags        String?   @db.VarChar(500) // Tags separados por comas
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastSync    DateTime? // Última sincronización con el panel

  // Relaciones
  panel       virtualization_panels @relation(fields: [panelId], references: [id], onDelete: Cascade)
  guilds      guilds                @relation(fields: [guildId], references: [id], onDelete: Cascade)
  logs        vm_action_logs[]
  permissions vm_permissions[]

  @@unique([panelId, id])
  @@index([panelId, status])
  @@index([guildId, userId])
  @@index([guildId, status])
}

// Logs de acciones en las VMs
model vm_action_logs {
  id         Int      @id @default(autoincrement())
  vmId       String   @db.VarChar(50)
  userId     String   @db.VarChar(25)
  action     String   @db.VarChar(50) // start, stop, restart, etc.
  status     String   @db.VarChar(20) // success, error, pending
  details    Json? // Detalles adicionales
  error      String?  @db.Text // Error message si falla
  executedAt DateTime @default(now())

  // Relaciones
  machine virtual_machines @relation(fields: [vmId], references: [id], onDelete: Cascade)

  @@index([vmId, executedAt])
  @@index([userId, executedAt])
}

// Permisos específicos para VMs
model vm_permissions {
  id          Int       @id @default(autoincrement())
  vmId        String    @db.VarChar(50)
  userId      String?   @db.VarChar(25) // Usuario específico
  roleId      String?   @db.VarChar(25) // O rol de Discord
  permissions Json // Array de permisos: ['start', 'stop', 'restart', 'console', 'stats']
  grantedBy   String    @db.VarChar(25) // Quien otorgó los permisos
  grantedAt   DateTime  @default(now())
  expiresAt   DateTime? // Opcional: permisos temporales

  // Relaciones
  machine virtual_machines @relation(fields: [vmId], references: [id], onDelete: Cascade)

  @@index([vmId])
  @@index([userId])
  @@index([roleId])
}

model tickets {
  id                 Int                @id @default(autoincrement())
  guildId            String             @db.VarChar(25)
  channelId          String             @db.VarChar(25)
  usrId              String             @db.VarChar(25)
  category           Int
  transcript         String             @db.Text
  closed             Boolean            @default(false)
  CreatedAt          DateTime           @default(now()) @db.Timestamp(0)
  tickets_categories tickets_categories @relation(fields: [category], references: [id], onUpdate: Restrict, map: "FK1_categorias")

  @@index([category], map: "FK1_categorias")
  @@index([channelId], map: "channelId")
  @@index([guildId], map: "guildId")
  @@index([usrId], map: "usrId")
}

model tickets_categories {
  id          Int       @id @default(autoincrement())
  guildId     String    @db.VarChar(25)
  name        String    @db.VarChar(30)
  description String    @db.VarChar(100)
  CategId     String?   @db.VarChar(25)
  tickets     tickets[]

  @@index([guildId], map: "guildId")
}

model traducciones {
  id    Int    @id @default(autoincrement())
  lang  String @default("") @db.VarChar(5)
  key   String @default("") @db.VarChar(255)
  value String @db.LongText

  @@unique([lang, id], map: "lang")
  @@index([lang], map: "lang_index")
}
